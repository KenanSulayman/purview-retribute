package org.purview.core.analysis

import org.purview.core.analysis.settings.Setting
import org.purview.core.data.Computation
import org.purview.core.report.ReportEntry
import org.purview.core.session.AnalysisStats
import scala.util.DynamicVariable

private[core] object Analyser {
  val statsStore = new DynamicVariable[AnalysisStats](new AnalysisStats)

  /**
   * Runtime statistics for analysers to use
   * @returns The stacked thread-local statistics module
   */
  def statistics = statsStore.value
}

/**
 * An object that processes something and generates a report.
 */
abstract class Analyser[A] extends Metadata with NotNull {

  /**
   * Runs this Analyser and generates a report
   * @param what That which should be analysed
   * @returns The report generated by this analyser
   */
  def analyse(what: A): Set[ReportEntry] = inputStore.withValue(Some(what)) {
    //Create a new session
    implicit val session = new Computation.Session

    //Use the session to calculate a new result
    Computation get result
  }

  /**
   * Runs this Analyser with the specified statistics module
   * @param what That which the analyser should analyser
   * @param s The statistics module to use
   * @returns The report generated by this analyser
   */
  def analyseWithStats(what: A)(implicit s: AnalysisStats) = Analyser.statsStore.withValue(s) {//Activate the thread-local AnalysisStats module
    analyse(what)
  }

  /**
   * The result that this analyser should produce
   */
  protected val result: Computation[Set[ReportEntry]]

  private object inputStore extends DynamicVariable[Option[A]](None)

  /**
   * The input that this analyser uses for computing the result
   */
  protected val input = Computation.unit[A](() => inputStore.value.get)

  /**
   * Reports this analysers current status
   * @param status The status to report
   */
  protected def status(status: String) = Analyser.statistics.reportStatus(status)

  /**
   * Reports this analysers current progress
   * @param status The progress to report; a number between 0 and 1
   */
  protected def progress(progress: Float) = Analyser.statistics.reportSubProgress(progress)

  override def toString = "Analyser(" + name + "," + description + ")"
}

object Metadata {
  def copy(what: Metadata) = new Metadata {
    val name = what.name
    val description = what.description
    override val version = what.version
    override val author = what.author
    override val iconResource = what.iconResource
  }
}

/**
 * Adds metadata information to an object, like for instance an Analyser.
 */
trait Metadata {
  /** The name of this object */
  val name: String

  /** The description of this object */
  val description: String

  /** This object's version */
  val version: Option[String] = None

  /** The creator of this object */
  val author: Option[String] = None

  /** The path to an icon resource that should be displayed for this object */
  val iconResource: Option[String] = None
}

/**
 * Adds modifyable settings to an object, like for instance an analyser.
 */
trait Settings {
  /** A generalized settings object */
  type GenericSetting = Setting[A] forSome { type A }

  /** The sequence of settings that this object provides */
  val settings: Seq[GenericSetting]
}
